{"name":"Sweet HMAC","tagline":"A tiny and easy to use Swift class to encrypt strings using HMAC algorithms.","body":"#Sweet HMAC\r\n\r\n`SweetHMAC` is a tiny and easy to use Swift class to encrypt strings using HMAC algorithms.\r\nA special thanks to [jernejstrasner](https://gist.github.com/jernejstrasner) for shared [HMACDigest Gist](https://gist.github.com/jernejstrasner/1d5fa5e2fabda2e729d1), that inspired to create this simple class and String extension.\r\n\r\n## Usage examples\r\n\r\nThere are two ways to use Sweet HMAC in your projects\r\n\r\n### 1. by String extension\r\n```swift\r\n// Will output this string: e470f785afb708cd8c2a31860642fd11\r\n\"I'm going to make him an offer he can't refuse\".HMAC(.MD5, secret:\"Vito Corleone\")\r\n```\r\n\r\n### 2. by SweetHMAC class\r\n\r\n```swift\r\nlet quote = \"I'm going to make him an offer he can't refuse\"\r\nlet author = \"Vito Corleone\"\r\n\r\n// Create a SweetHMAC instance with your message and secret strings\r\nlet digest:SweetHMAC = SweetHMAC(source: quote, secret: author)\r\n\r\n// Pick some computed HMAC output based on some algorithm using \"HMAC\" method...\r\nlet md5 = digest.HMAC(.MD5)\r\n\r\n// ...or do it more \"Sweet\" like this\r\nlet md5 = SweetHMAC(source: quote, secret: author).HMAC(.MD5)\r\n```\r\n\r\n## Supported HMAC algorithms\r\n\r\n* MD5\r\n* SHA1\r\n* SHA224\r\n* SHA256\r\n* SHA384\r\n* SHA512\r\n\r\n## Installation\r\n\r\nSweetHMAC have many clear and simple options to be used in any iOS or OSX projects.\r\n\r\n##Using dependency manager\r\nActually SweetHMAC can be used with those dependency managers\r\n* CocoaPods\r\n* Carthage\r\n\r\n###CocoaPods\r\n\r\nYou can use SweetHMAC with CocoaPods, specify your `Podfile` like this:\r\n\r\n```ruby\r\nsource 'https://github.com/CocoaPods/Specs.git'\r\nplatform :ios, '8.0'\r\nuse_frameworks!\r\n\r\npod 'SweetHMAC', '~> 1.1'\r\n```\r\n\r\n##Carthage\r\n\r\nAlso you can use Carthage to SweetHMAC framework at your project, just add SweetHMac in your `Cartfile` file like this:\r\n\r\n`github \"jancassio/SweetHMAC\" >= 1.1`\r\n\r\n##Integrated Project\r\n\r\nAs many iOS/OSX projects, you can add third party libraries in your project as well.\r\n\r\n###Embeded Framework\r\n\r\nYou can add SweetHMAC as submodule (preferred) or paste entire SweetHMAC project relative to your Xcode project, choose one of both options and after them:\r\n\r\n  1. Drag `SweetHMAC.xcodeproj` from SweetHMAC folder to your project.\r\n  2. At Xcode, open _\"Project Navigator\"_ (⌘+1).\r\n  3. Select SweetHMAC project (the blue project icon).\r\n  4. Check if SweetHMAC deployment target matches your project deployment target.\r\n  5. At this point, select _\"Build Phases\"_ tab.\r\n  6. Click on **+** icon to add a new _\"Copy Phase\"_. Optional: Rename this phase to _\"Embeded Frameworks\"_.\r\n  7. Set destination to _\"Frameworks\"_.\r\n  8. Add `SweetHMAC.framework`.\r\n\r\n### Source file\r\n\r\nThis is not the preferred option to add SweetHMAC in your project, because SweetHMAC depends by CommonCrypto lib to work properly and, Swift can't access this lib directly.\r\n\r\nSo if you still want to use SweetHMAC by source files, follow steps below:\r\n\r\n  1. At Xcode, open _\"Project Navigator\"_ (⌘+1).\r\n  2. Select your project file (the blue project icon).\r\n  3. Click on _\"Build Phases\"_ tab.\r\n  4. Create a new _\"Run Script\"_ phase clicking on **+** icon.\r\n  5. Drag the run script phase created to stay below the first phase (ak _\"Target dependencies\"_).\r\n  6. Paste the code below at run script phase created before:\r\n\r\n  ```shell\r\n  COMMOM_CRYPTO_PATH=$SDKROOT/usr/include/CommonCrypto/CommonCrypto.h\r\n  COMMOM_CRYPTO_R_PATH=$SDKROOT/usr/include/CommonCrypto/CommonRandom.h\r\n\r\n  MODULE_DIR=\"$SRCROOT/Modules/CommonCrypto\"\r\n  MODULE_FILE=$MODULE_DIR/module.map\r\n  MODULE_TEMPLATE=\"module CommonCrypto [system] {\\n\\t\r\n    header \\\"$COMMOM_CRYPTO_PATH\\\"\\n\\t\r\n    header \\\"$COMMOM_CRYPTO_R_PATH\\\"\\n\\t\r\n    export *\\n\r\n  }\"\r\n\r\n  echo \"Create Modules path to map CommonCrypto lib\"\r\n  mkdir -p \"$SRCROOT/Modules/CommonCrypto\"\r\n\r\n  echo \"Cleanup previous CommonCrypto script to make sure the deployment target is always updated\"\r\n\r\n  echo \"\" > $MODULE_FILE\r\n\r\n  echo \"Create CommonCrypto module map template\"\r\n  echo -e $MODULE_TEMPLATE > $MODULE_FILE\r\n  ```\r\n\r\n  7. Create a new file (⌘+N).\r\n  8. Select _\"iOS\"_/_\"Others\"_.\r\n  9. Select _\"Congfiguration Settings File\"_.\r\n  10. Put any name you want.\r\n  10. Add the content below in Configuration file created before:\r\n  ```\r\n  SWIFT_INCLUDE_PATHS=\"$SRCROOT/Modules\"\r\n  ```\r\n  12. Go to your project file in _\"Project Navigator\"_ (⌘+1)\r\n  13. Select your project file and select your project above your project targets.\r\n  14. Change configurations for the last one you created for each target you are using SweetHMAC by source.\r\n  15. Build your project.\r\n\r\n###Quick Observation\r\nEach time you change your deployment device for example, from Simulator to Device, you should build your project, because the script added in build phase, will use the current operational system selected in your Xcode scheme to construct the absolute path to the CommonCrypto header relative of Simulator SDK or iPhoneOS SDK.\r\n\r\n## License\r\n\r\nCopyright (c) 2014 Jan Cassio. All rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"UA-95677-16","note":"Don't delete this file! It's used internally to help with page regeneration."}